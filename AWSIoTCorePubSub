from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient #import the AWSIoTPython by using Pip install AWSIoTPythonSDk
import RPi.GPIO as GPIO #importing the Raspberrypi GPIO Library
import dht11#import DHT sensor Library file
import time,json#importing time and Json
import datetime

host = "XXXXXXXXXXXXX.iot.us-east-1.amazonaws.com"#Replace with AWS EndPoint
rootCAPath = "/home/pi/AWSIOT/rootCA.pem"#Replace the directory with your Saved Root Certificate Location
certificatePath = "/home/pi/AWSIOT/ccd33b955b-certificate.pem.crt"#Replace the directory with your Saved thing ertificate Location
privateKeyPath = "/home/pi/AWSIOT/ccd33b955b-private.pem.key"#Replace the directory with your Saved private key Location
topic = "TopicName"#Replace with your Topic Name

# initialize GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.cleanup()

# read data using pin 8
instance = dht11.DHT11(pin=8)


# Custom MQTT message callback this function is to retrive the Data from AWS IoT Core
def customCallback(client, userdata, message):
	print("Received a new message: ")
	print(message.payload)
	print("from topic: ")
	print(message.topic)
	print("--------------\n\n")
	

# Init AWSIoTMQTTClient
myAWSIoTMQTTClient = None
myAWSIoTMQTTClient = AWSIoTMQTTClient("RaspberryPi")# replace with Client Name it Can be any string
myAWSIoTMQTTClient.configureEndpoint(host, 8883)
myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)


# AWSIoTMQTTClient connection configuration
myAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)
myAWSIoTMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing
myAWSIoTMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz
myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec
myAWSIoTMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec

# Connect and subscribe to AWS IoT
myAWSIoTMQTTClient.connect()
myAWSIoTMQTTClient.subscribe("TopicName", 1, customCallback)
time.sleep(2)

# Publish to the same topic in a loop forever
loopCount = 0

while True:
        date=str (datetime.datetime.now())
        result = instance.read()
        if result.is_valid():
                JSONPayload = {'id':date,'sno': loopCount,'temperature': result.temperature, 'humidity': result.humidity}
                print json.dumps(JSONPayload)
                myAWSIoTMQTTClient.publish(topic,json.dumps(JSONPayload), 1)
                loopCount+=1
                time.sleep(5)
